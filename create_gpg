#!/bin/bash

# This file is licensed under the GNU Lesser General Public License v3.0
# See https://www.gnu.org/licenses/lgpl-3.0.txt for a copy of the license
#
# Usage: buildgpg config-file [step-num]

function printUsage {
  echo "Usage: $0 config-file [step-num]"
}


ABI=64     ## default is 64-bit build
LIBS_FILE=libs.txt
GPGVERSION=2.1.10
PKGVERSION=${GPGVERSION}.0001
GPGDLPACKAGE=http://mirror.switch.ch/ftp/mirror/gnupg/gnupg/gnupg-${GPGVERSION}.tar.bz2


if [ "$1" = "-h" -o "$1" = "--help" ]; then
  printUsage
  exit
fi

if [ $# -lt 1 ]; then
  printUsage
  exit 1
fi

if [ ! -f "$1" ]; then
  echo "Cannot find config file '$1'"
  exit 1
fi

. "$1"


# internal variables
PINENTRY=0.9.4
BASEDIR=$(dirname $0)
NCPU=$(sysctl hw.ncpu | awk '{print $2}')

if [ "${BASEDIR:0:1}" != "/" ]; then
  # ensure that BASEDIR is an absolute path
  BASEDIR=$(pwd)"/$BASEDIR"
fi

step=0

if [ $# -gt 1 ]; then
  step=$2
fi

case $ABI in
32)
  ARCH="i386"
  HOSTSYSTEM="-host=i386-apple-darwin8.0.0"
  ;;
64)
  ARCH="x86_64"
  HOSTSYSTEM=""
  ;;
*)
  echo "Invalid ABI '$ABI'"
  exit 1
esac


function doFail {
  echo ""
  echo " ** ERROR at step $1 **   - build failed"
  echo ""
  exit 1
}

function unpack {
  inFile=$1
  fn=`echo $inFile|sed -E 's/^.*\.tar//'`

  case $fn in
  .lz)
    lunzip -k -c $inFile | tar xf -
    ;;
  .bz2)
    tar jxf $inFile
    ;;
  .gz)
    tar zxf $inFile
    ;;
  esac
}

function buildlib {
  echo ""
  echo "**** building $2 ****"
  echo ""

  libname=${lib/-[0-9]*}
  moreParams=$(grep $libname $BASEDIR/config-params.txt | cut -d: -f2)
  n_cpu=$(grep $libname $BASEDIR/config-params.txt | cut -d: -f3)

  if [ "$moreParams" = "ignore" ]; then
    return 0
  fi

  if [ n_cpu = "" ]; then
    n_cpu=$NCPU
  fi

  if [ ! -f "configure" ]; then
    ./autogen.sh
  fi

  moreCFlags="$ADDITIONAL_CFLAGS"
  if [ ${libname:0:6} = "sqlite" ]; then
    moreCFlags=
  fi

  CFLAGS="-arch $ARCH  -m$ABI $moreCFlags" \
    CXXFLAGS="-arch $ARCH" \
    ABI=$ABI \
    LDFLAGS="-L$DIST_DIR/lib -arch $ARCH" \
    CPPFLAGS="-I$DIST_DIR/include -arch $ARCH" \
    PKG_CONFIG_PATH=$DIST_DIR/lib/pkgconfig \
    ./configure --prefix=$DIST_DIR \
    $HOSTSYSTEM $moreParams || doFail $1

  make -j $n_cpu && make install || doFail $1
}


if [ $step -le 1 ]; then
  echo "Downloading required files"
  mkdir -p $SRC_DIR
  cd $SRC_DIR
  for l in $(cat $BASEDIR/$LIBS_FILE); do
    libFull=$(echo $l | cut -d '|' -f 1)
    libF=$(basename $libFull)
    if [ ! -f $libF ]; then
      curl -L -o $libF $libFull
    else
      echo "Skipping $libFull"
    fi

    if [ ! -z "$libF" -a -f "$libF" ]; then
      # SHA-1 checksum check
      shsum1=$(echo $l | cut -d '|' -f 2)
      shsum2=$(shasum $libF | cut -d ' ' -f 1)
      if [ ! -z "$shsum1" -a "$shsum1" != "$shsum2" ]; then
        echo "SHA-1 sums of file $libF don't match"
        echo "expected: $shsum1"
        echo "obtained: $shsum2"
        doFail $step
      fi
    fi
  done
fi

if [ $step -le 4 ]; then
  cd $SRC_DIR
  gpgBaseName=$(basename $GPGDLPACKAGE)

  if [ ! -f $gpgBaseName ]; then
      echo "Downloading GnuPG"
      curl -L -o $gpgBaseName $GPGDLPACKAGE || doFail "Failed to download gpg"
  fi

  if [ ! -f ${gpgBaseName}.sig ]; then
      curl -L -o ${gpgBaseName}.sig ${GPGDLPACKAGE}.sig  || doFail "Failed to download gpg signature"
  fi

  stat=$(gpg2 --status-fd 1 --verify ${gpgBaseName}.sig ${gpgBaseName} | grep -c '^\[GNUPG:\] GOODSIG 249B39D24F25E3B6')

  if [ $stat -eq 0 ]; then
    echo "Could not verify GnuPG package signature"
    echo "Please delete gpg package and signature file before retrying"
    doFail 4
  fi
fi

if [ $step -le 5 ]; then
  echo "deleting build and dist directories"
  rm -rf $MAIN_PREFIX $DIST_DIR
fi


mkdir -p $MAIN_PREFIX
mkdir -p $DIST_DIR
cd $MAIN_PREFIX

if [ $step -le 8 ]; then
  for l in $(cat $BASEDIR/$LIBS_FILE); do
    libFull=$(echo $l | cut -d '|' -f 3)
    if [ -z "$libFull" ]; then
      libFull=$(echo $l | cut -d '|' -f 1)
    fi
    lib=`basename $libFull`
    if [ ! -z "$lib" -a -f "$SRC_DIR/$lib" ]; then
      echo "unpacking $lib"
      unpack $SRC_DIR/$lib
    fi
  done
fi


export PATH=$DIST_DIR/bin:$PATH

cstep=10
for l in $(cat $BASEDIR/$LIBS_FILE); do
  if [ $step -le $cstep ]; then
    libFull=$(echo $l | cut -d '|' -f 3)
    if [ -z "$libFull" ]; then
      libFull=$(echo $l | cut -d '|' -f 1)
    fi
    lib=$(basename $libFull | sed -E 's/.tar.(gz|bz2|lz)//')
    if [ ! -z "$lib" -a -d "$MAIN_PREFIX/$lib" ]; then
      cd $MAIN_PREFIX/$lib
      make distclean > /dev/null 2>&1
      buildlib $cstep $lib
    fi
  fi
  cstep=$(expr $cstep + 1)
done


# pinentry

if [ $step -le 25 ]; then
  if [ ! -f $SRC_DIR/$PINENTRY ]; then
    cd $SRC_DIR
    curl -L -o pinentry-mac-${PINENTRY}.tar.gz https://github.com/GPGTools/pinentry-mac/archive/v${PINENTRY}.tar.gz || doFail 25
  fi

fi

if [ $step -le 26 ]; then
  cd $MAIN_PREFIX
  tar zxf $SRC_DIR/pinentry-mac-${PINENTRY}.tar.gz || doFail 26
fi

if [ $step -le 27 ]; then
  cd $MAIN_PREFIX/pinentry-mac-$PINENTRY
  make || doFail 27
fi

if [ $step -le 28 ]; then
  cd $MAIN_PREFIX
  tar jxf $SRC_DIR/gnupg-${GPGVERSION}.tar.bz2 || doFail 28
fi


cd $MAIN_PREFIX/gnupg-$GPGVERSION

## configure GnuPG

if [ $step -le 30 ]; then

  # ld does not support rpath on Mac (see below)

  export PATH=$BASE_DIR/bin:$PATH
  GPGCONFIGPARAM="--enable-tests"

  if [ ! -f ./configure ]; then
    GPGCONFIGPARAM="--disable-tests --enable-maintainer-mode --disable-doc"
    GETTEXT_PREFIX=$DIST_DIR/bin/ ./autogen.sh --force || doFail 30
  fi

  CFLAGS="-arch $ARCH $ADDITIONAL_CFLAGS" \
    CXXFLAGS="-arch $ARCH" \
    ABI=$ABI \
    LDFLAGS="-L$DIST_DIR/lib -arch $ARCH" \
    CPPFLAGS="-I$DIST_DIR/include -arch $ARCH" \
    PKG_CONFIG_PATH=$DIST_DIR/lib/pkgconfig \
    ./configure \
    --prefix=/usr/local/gnupg-2.1 \
    --localstatedir=/var \
    --sysconfdir=/usr/local/gnupg-2.1/etc \
    $HOSTSYSTEM \
    --disable-rpath \
    --with-pinentry-pgm=/usr/local/gnupg-2.1/bin/pinentry-mac.app/Contents/MacOS/pinentry-mac \
    --with-agent-pgm=/usr/local/gnupg-2.1/bin/gpg-agent \
    --with-scdaemon-pgm=/usr/local/gnupg-2.1/libexec/scdaemon \
    --with-dirmngr-pgm=/usr/local/gnupg-2.1/bin/dirmngr \
    --with-dirmngr-ldap-pgm=/usr/local/gnupg-2.1/libexec/dirmngr_ldap \
    --with-protect-tool-pgm=/usr/local/gnupg-2.1/libexec/gpg-protect-tool \
    --enable-gpg2-is-gpg \
    --with-libgpg-error-prefix=$DIST_DIR \
    --with-libgcrypt-prefix=$DIST_DIR \
    --with-libassuan-prefix=$DIST_DIR \
    --with-ksba-prefix=$DIST_DIR \
    --with-npth-prefix=$DIST_DIR \
    --with-readline=$DIST_DIR \
    --with-adns=$DIST_DIR \
    $GPGCONFIGPARAM \
    --with-libiconv-prefix=$DIST_DIR || doFail 30
fi

# tweak Makefiles
if [ $step -le 31 ]; then
  if [ -d build-aux ]; then
    if [ ! -e build-aux/install-sh.orig ]; then
      mv build-aux/install-sh build-aux/install-sh.orig || doFail 31
    fi

    dist=$(echo $DIST_DIR | sed 's/\//\\\//g')
    sed 's/##DISTDIR##/'$dist'/' < $BASEDIR/bin/install-sh-wrapper > build-aux/install-sh || doFail 31
    chmod +x build-aux/install-sh || doFail 31
  fi
fi


if [ $step -le 32 ]; then

  dist=$(echo $DIST_DIR | sed 's/\//\\\//g')
  sed 's/##DISTDIR##/'$dist'/' < $BASEDIR/bin/install-wrapper > $DIST_DIR/install-wrapper || doFail 32
  chmod +x $DIST_DIR/install-wrapper || doFail 32

  for f in $(find . -name Makefile); do
    sed 's/\/usr\/bin\/install/'$dist'\/install-wrapper/' < $f > a || doFail 32
    sed 's/\/usr\/local\/bin\/ginstall/'$dist'\/install-wrapper/' < $f > a || doFail 32
    mv a $f
  done
fi

if [ $step -le 35 ]; then
  make -j $NCPU || doFail 35
fi

if [ $step -le 36 ]; then

  make install || doFail 36
fi

# Adjust rpath using otool for binaries in bin/
if [ $step -le 40 ]; then
  # some files get wrong permissions, let's just fix them ...
  find $DIST_DIR -type f -exec chmod +w {} +

  cd $DIST_DIR/bin

  if [ -d gpg ]; then
    mv gpg/gpg gpg2
    rmdir gpg
  fi

  if [ -d gpgv ]; then
    mv gpgv/gpgv gpgv2
    rmdir gpgv
  fi


  for f in gpg2 gpgv2 g13 gpg-agent gpg-connect-agent gpg-error gpgconf gpgkey2ssh gpgparsemail gpgsm \
      gpgtar kbxutil watchgnupg dirmngr-client dirmngr; do
    echo "adapting ld-paths for $f"
    install_name_tool -add_rpath @loader_path/../lib $f
    for l in `otool -L $f | cut -d' ' -f1`; do
      if [ `echo $l | grep -c "$DIST_DIR/lib"` -gt 0 ]; then
        b=@rpath/`basename $l`
        install_name_tool -change $l $b $f
      fi
    done
  done
fi

# Adjust rpath using otool for binaries in libexec/
if [ $step -le 42 ]; then
  cd $DIST_DIR/libexec
  for f in dirmngr_ldap gpg-preset-passphrase scdaemon gpg-check-pattern gpg-protect-tool; do
    echo "adapting ld-paths for $f"
    install_name_tool -add_rpath @loader_path/../lib $f
    for l in `otool -L $f | cut -d' ' -f1`; do
      if [ `echo $l | grep -c "$DIST_DIR/lib"` -gt 0 ]; then
        b=@rpath/`basename $l`
        install_name_tool -change $l $b $f
      fi
    done
  done
fi

if [ $step -le 45 ]; then
  rm -rf $REL_DIR >/dev/null 2>&1
  mkdir -p $REL_DIR
  cd $DIST_DIR

  tar cf - \
    bin/dirmngr \
    bin/dirmngr-client \
    bin/dumpsexp \
    bin/g13 \
    bin/gpg-agent \
    bin/gpg-connect-agent \
    bin/gpg-error \
    bin/gpg2 \
    bin/gpgconf \
    bin/gpgkey2ssh \
    bin/gpgparsemail \
    bin/gpgsm \
    bin/gpgsm-gencert.sh \
    bin/gpgtar \
    bin/gpgv2 \
    bin/hmac256 \
    bin/kbxutil \
    bin/mpicalc \
    bin/watchgnupg \
    lib/*dylib libexec share/gnupg share/man | (cd $REL_DIR; tar xf -)

  cd $MAIN_PREFIX/pinentry-mac-$PINENTRY/build/Release
  tar cf - pinentry-mac.app | (cd $REL_DIR/bin; tar xf -)

  cd $REL_DIR/bin
  ln -s gpg2 gpg

  cp $BASEDIR/scripts/convert-keyring .
fi

# Adjust rpath using otool for libraries in lib/
if [ $step -le 50 ]; then
  cd $REL_DIR/lib
  for f in `find . -type f -name "*.dylib"`; do
    echo "adapting ld-paths for $f"
    install_name_tool -add_rpath @loader_path/../lib $f
    for l in `otool -L $f | cut -d' ' -f1`; do
      if [ `echo $l | grep -c "$DIST_DIR/lib"` -gt 0 ]; then
        b=@rpath/`basename $l`
        install_name_tool -change $l $b $f
      fi
    done
  done
fi

if [ $step -le 55 ]; then

  echo "Creating GnuPG package"

  rm -f $DIST_DIR/"GnuPG.pkg"

  pkgbuild --root $REL_DIR \
    --identifier net.sourceforge.gpgosx \
    --version $PKGVERSION \
    --install-location /usr/local/gnupg-2.1 \
    --scripts $BASEDIR/pkg-scripts \
    --component-plist $BASEDIR/pkg-data/install-pkg.plist \
    $DIST_DIR/"GnuPG.pkg" || doFail 55

fi

if [ $step -le 60 ]; then
  rm -rf $INSTALL_DIR
  mkdir -p $INSTALL_DIR

  sed 's/{PKGVERSION}/'${PKGVERSION}'/' $BASEDIR/pkg-data/distro.xml > $DIST_DIR/distro.xml

  if [ "x$PKG_SIGN_CERT" != "x" ]; then

    echo "Creating signed installer package"

    productbuild --distribution $DIST_DIR/distro.xml \
      --sign "${PKG_SIGN_CERT}" \
      --package-path $DIST_DIR \
      $INSTALL_DIR/"Install.pkg" || doFail 60

  else

    echo "Creating unsigned installer package"

    productbuild --distribution $DIST_DIR/distro.xml \
      --package-path $DIST_DIR \
      $INSTALL_DIR/"Install.pkg"  || doFail 60
  fi

fi

if [ $step -le 65 ]; then
  echo "Creating final .dmg file"
  cp $BASEDIR/pkg-docs/License.txt $BASEDIR/pkg-docs/"Read Me.rtf" $INSTALL_DIR
  rm -f $MAIN_DIR/GnuPG-${GPGVERSION}.dmg
  hdiutil create $MAIN_DIR/GnuPG-${GPGVERSION}.dmg -volname "GnuPG 2.1" -srcfolder $INSTALL_DIR || doFail 65
fi

if [ $step -le 70 ]; then
  cd $BASEDIR
  rm -f $MAIN_DIR/GnuPG-${GPGVERSION}.dmg.sig
  if [ "x$SIGNING_KEY_ID" != "x" ]; then
    gpg2 -o $MAIN_DIR/GnuPG-${GPGVERSION}.dmg.sig -u "$SIGNING_KEY_ID" --detach-sign $MAIN_DIR/GnuPG-${GPGVERSION}.dmg || doFail 70
    echo "Created DMG signature file"
  fi
fi



echo "done"
