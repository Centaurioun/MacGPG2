#!/bin/bash

# This file is licensed under the GNU Lesser General Public License v3.0
# See https://www.gnu.org/licenses/lgpl-3.0.txt for a copy of the license
#
# Usage: buildgpg config-file [step-num]

function printUsage {
  echo "Usage: $0 config-file [step-num]"
}


ABI=64     ## default is 64-bit build

if [ "$1" = "-h" -o "$1" = "--help" ]; then
  printUsage
  exit
fi

if [ $# -lt 1 ]; then
  printUsage
  exit 1
fi

if [ ! -f "$1" ]; then
  echo "Cannot find config file '$1'"
  exit 1
fi

. "$1"

# internal variables
PINENTRY=pinentry-mac-0.8.1
GPGVERSION=2.1.0
PKGVERSION=2.1.0.0003
BASEDIR=$(dirname $0)

if [ "${BASEDIR:0:1}" != "/" ]; then
  # ensure that BASEDIR is an absolute path
  BASEDIR=$(pwd)"/$BASEDIR"
fi

step=0

if [ $# -gt 1 ]; then
  step=$2
fi

case $ABI in
32)
  ARCH="i386"
  HOSTSYSTEM="-host=i386-apple-darwin8.0.0"
  ;;
64)
  ARCH="x86_64"
  HOSTSYSTEM=""
  ;;
*)
  echo "Invalid ABI '$ABI'"
  exit 1
esac


function doFail {
  echo ""
  echo " ** ERROR at step $1 **   - build failed"
  echo ""
  exit 1
}

function unpack {
  inFile=$1
  fn=`echo $inFile|sed -E 's/^.*\.tar//'`

  case $fn in
  .lz)
    lunzip -k -c $inFile | tar xf -
    ;;
  .bz2)
    tar jxf $inFile
    ;;
  .gz)
    tar zxf $inFile
    ;;
  esac
}

function buildlib {
  echo ""
  echo "**** building $2 ****"
  echo ""

  libname=${lib/-[0-9]*}
  moreParams=`grep $libname $BASEDIR/config-params.txt | cut -d: -f2`
  if [ "$moreParams" = "ignore" ]; then
    return 0
  fi

  CFLAGS="-arch $ARCH  -m$ABI" \
    CXXFLAGS="-arch $ARCH" \
    ABI=$ABI \
    LDFLAGS="-L$DIST_DIR/lib -arch $ARCH" \
    CPPFLAGS="-I$DIST_DIR/include -arch $ARCH" \
    PKG_CONFIG_PATH=$DIST_DIR/lib/pkgconfig \
    ./configure --prefix=$DIST_DIR \
    $HOSTSYSTEM $moreParams || doFail $1

  make -j 2 && make install || doFail $1
}


if [ $step -le 1 ]; then
  echo "Downloading required files"
  mkdir -p $SRC_DIR
  cd $SRC_DIR
  for l in `cat $BASEDIR/libs.txt`; do
    wget $l
  done
fi

if [ $step -le 5 ]; then
  echo "deleting build and dist directories"
  rm -rf $MAIN_PREFIX $DIST_DIR
fi


mkdir -p $MAIN_PREFIX
mkdir -p $DIST_DIR
cd $MAIN_PREFIX

if [ $step -le 8 ]; then
  for l in `cat $BASEDIR/libs.txt`; do
    lib=`basename $l`
    echo "unpacking $lib"
    unpack $SRC_DIR/$lib
  done
fi


export PATH=$DIST_DIR/bin:$PATH

cstep=10
for l in `cat $BASEDIR/libs.txt`; do
  if [ $step -le $cstep ]; then
    lib=`basename $l | sed -E 's/.tar.(gz|bz2|lz)//'`
    cd $MAIN_PREFIX/$lib
    make distclean > /dev/null 2>&1
    buildlib $cstep $lib
  fi
  cstep=`expr $cstep + 1`
done


if [ $step -le 23 ]; then
  cd $MAIN_PREFIX/$PINENTRY
  make || doFail 23
fi

if [ $step -le 24 ]; then
  cd $MAIN_PREFIX
  tar jxf $SRC_DIR/gnupg-${GPGVERSION}.tar.bz2 || doFail 24
fi


cd $MAIN_PREFIX/gnupg-$GPGVERSION

if [ $step -le 25 ]; then
  patch -p1 < $BASEDIR/patches/makefile.patch || doFail 25
fi

if [ $step -le 30 ]; then

  # ld does not support rpath on Mac (see below)

  CFLAGS="-arch $ARCH" \
    CXXFLAGS="-arch $ARCH" \
    ABI=$ABI \
    LDFLAGS="-L$DIST_DIR/lib -arch $ARCH" \
    CPPFLAGS="-I$DIST_DIR/include -arch $ARCH" \
    PKG_CONFIG_PATH=$DIST_DIR/lib/pkgconfig \
    ./configure \
    --prefix=$DIST_DIR \
    $HOSTSYSTEM \
    --disable-rpath \
    --with-pinentry-pgm=/usr/local/gnupg-2.1/bin/pinentry-mac.app/Contents/MacOS/pinentry-mac \
    --with-agent-pgm=/usr/local/gnupg-2.1/bin/gpg-agent \
    --with-scdaemon-pgm=/usr/local/gnupg-2.1/libexec/scdaemon \
    --with-dirmngr-pgm=/usr/local/gnupg-2.1/bin/dirmngr \
    --with-dirmngr-ldap-pgm=/usr/local/gnupg-2.1/libexec/dirmngr_ldap \
    --with-protect-tool-pgm=/usr/local/gnupg-2.1/libexec/gpg-protect-tool \
    --with-libgpg-error-prefix=$DIST_DIR \
    --with-libgcrypt-prefix=$DIST_DIR \
    --with-libassuan-prefix=$DIST_DIR \
    --with-ksba-prefix=$DIST_DIR \
    --with-npth-prefix=$DIST_DIR \
    --with-readline=$DIST_DIR \
    --with-libiconv-prefix=$DIST_DIR || doFail 30
fi

if [ $step -le 35 ]; then
  make -j 1 && make install || doFail 35
fi

# Adjust rpath using otool for binaries in bin/
if [ $step -le 40 ]; then
  cd $DIST_DIR/bin
  for f in gpg2 gpgv2 g13 gpg-agent gpg-connect-agent gpg-error gpgconf gpgkey2ssh gpgparsemail gpgsm \
      gpgtar kbxutil watchgnupg dirmngr-client dirmngr; do
    echo "adapting ld-paths for $f"
    install_name_tool -add_rpath @loader_path/../lib $f
    for l in `otool -L $f | cut -d' ' -f1`; do
      if [ `echo $l | grep -c "$DIST_DIR/lib"` -gt 0 ]; then
        b=@rpath/`basename $l`
        install_name_tool -change $l $b $f
      fi
    done
  done
fi

# Adjust rpath using otool for binaries in libexec/
if [ $step -le 42 ]; then
  cd $DIST_DIR/libexec
  for f in dirmngr_ldap gpg-preset-passphrase scdaemon gpg-check-pattern gpg-protect-tool; do
    echo "adapting ld-paths for $f"
    install_name_tool -add_rpath @loader_path/../lib $f
    for l in `otool -L $f | cut -d' ' -f1`; do
      if [ `echo $l | grep -c "$DIST_DIR/lib"` -gt 0 ]; then
        b=@rpath/`basename $l`
        install_name_tool -change $l $b $f
      fi
    done
  done
fi

if [ $step -le 45 ]; then
  rm -rf $REL_DIR >/dev/null 2>&1
  mkdir -p $REL_DIR
  cd $DIST_DIR
  tar cf - \
    bin/dirmngr \
    bin/dirmngr-client \
    bin/dumpsexp \
    bin/g13 \
    bin/gpg-agent \
    bin/gpg-connect-agent \
    bin/gpg-error \
    bin/gpg2 \
    bin/gpgconf \
    bin/gpgkey2ssh \
    bin/gpgparsemail \
    bin/gpgsm \
    bin/gpgsm-gencert.sh \
    bin/gpgtar \
    bin/gpgv2 \
    bin/hmac256 \
    bin/kbxutil \
    bin/mpicalc \
    bin/watchgnupg \
    lib/*dylib libexec share/gnupg share/man | (cd $REL_DIR; tar xf -)

  cd $MAIN_PREFIX/$PINENTRY/build/Release
  tar cf - pinentry-mac.app | (cd $REL_DIR/bin; tar xf -)

  cd $REL_DIR/bin
  ln -s gpg2 gpg
fi

# Adjust rpath using otool for libraries in lib/
if [ $step -le 50 ]; then
  cd $REL_DIR/lib
  for f in `find . -type f -name "*.dylib"`; do
    echo "adapting ld-paths for $f"
    install_name_tool -add_rpath @loader_path/../lib $f
    for l in `otool -L $f | cut -d' ' -f1`; do
      if [ `echo $l | grep -c "$DIST_DIR/lib"` -gt 0 ]; then
        b=@rpath/`basename $l`
        install_name_tool -change $l $b $f
      fi
    done
  done
fi

if [ $step -le 55 ]; then
  echo "Creating installer package"

  rm -rf $INSTALL_DIR
  mkdir -p $INSTALL_DIR
  pkgbuild --root $REL_DIR \
    --identifier org.gnupg.gpg2.1 \
    --version $PKGVERSION \
    --install-location /usr/local/gnupg-2.1 \
    --scripts $BASEDIR/pkg-scripts \
    $INSTALL_DIR/"Install.pkg" || doFail 55
fi

if [ $step -le 60 ]; then
  echo "Creating final .dmg file"
  cp $BASEDIR/pkg-docs/License.txt $BASEDIR/pkg-docs/"Read Me.rtf" $INSTALL_DIR
  rm -f $MAIN_DIR/GnuPG-${GPGVERSION}.dmg
  hdiutil create $MAIN_DIR/GnuPG-${GPGVERSION}.dmg -volname "GnuPG 2.1" -srcfolder $INSTALL_DIR || doFail 60
fi

echo "done"
